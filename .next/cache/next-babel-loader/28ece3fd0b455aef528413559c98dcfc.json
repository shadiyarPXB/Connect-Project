{"ast":null,"code":"var getTimeRemaining = function getTimeRemaining(endTime) {\n  var current = new Date() + '';\n  var total = Date.parse(endTime) - Date.parse(current);\n  var seconds = Math.floor(total / 1000 % 60);\n  var minutes = Math.floor(total / 1000 / 60 % 60);\n  var hours = Math.floor(total / (1000 * 60 * 60) % 24);\n  var days = Math.floor(total / (1000 * 60 * 60 * 24));\n\n  if (total <= 0) {\n    return {\n      total: Date.parse(endTime),\n      // percentage: 100,\n      days: \"0 day\",\n      hours: \"0 hour\",\n      minutes: \"0 minute\",\n      seconds: \"0 second\"\n    };\n  }\n\n  return {\n    total: total,\n    // percentage: (Date.parse(current) / Date.parse(endTime)) * 100,\n    days: days > 1 ? \"\".concat(days, \" days\") : \"\".concat(days, \" day\"),\n    hours: hours > 1 ? \"\".concat(hours, \" hours\") : \"\".concat(hours, \" hour\"),\n    minutes: minutes > 1 ? \"\".concat(minutes, \" minutes\") : \"\".concat(minutes, \" minute\"),\n    seconds: seconds > 1 ? \"\".concat(seconds, \" seconds\") : \"\".concat(seconds, \" second\")\n  };\n};\n\nexport default getTimeRemaining;","map":{"version":3,"sources":["/Users/mdshifut/Downloads/Connect-Project-master/utils/getTimeRemaining.tsx"],"names":["getTimeRemaining","endTime","current","Date","total","parse","seconds","Math","floor","minutes","hours","days"],"mappings":"AAAA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAa;AAClC,MAAMC,OAAe,GAAG,IAAIC,IAAJ,KAAa,EAArC;AACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAWJ,OAAX,IAAsBE,IAAI,CAACE,KAAL,CAAWH,OAAX,CAApC;AACA,MAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYJ,KAAK,GAAG,IAAT,GAAiB,EAA5B,CAAhB;AACA,MAAMK,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYJ,KAAK,GAAG,IAAR,GAAe,EAAhB,GAAsB,EAAjC,CAAhB;AACA,MAAMM,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAYJ,KAAK,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAN,GAA6B,EAAxC,CAAd;AACA,MAAMO,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWJ,KAAK,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAhB,CAAb;;AACA,MAAIA,KAAK,IAAI,CAAb,EAAgB;AACZ,WAAO;AACHA,MAAAA,KAAK,EAAED,IAAI,CAACE,KAAL,CAAWJ,OAAX,CADJ;AAEH;AACAU,MAAAA,IAAI,SAHD;AAIHD,MAAAA,KAAK,UAJF;AAKHD,MAAAA,OAAO,YALJ;AAMHH,MAAAA,OAAO;AANJ,KAAP;AAQH;;AAED,SAAO;AACHF,IAAAA,KAAK,EAALA,KADG;AAEH;AACAO,IAAAA,IAAI,EAAEA,IAAI,GAAG,CAAP,aAAcA,IAAd,uBAA+BA,IAA/B,SAHH;AAIHD,IAAAA,KAAK,EAAEA,KAAK,GAAG,CAAR,aAAeA,KAAf,wBAAkCA,KAAlC,UAJJ;AAKHD,IAAAA,OAAO,EAAEA,OAAO,GAAG,CAAV,aAAiBA,OAAjB,0BAAwCA,OAAxC,YALN;AAMHH,IAAAA,OAAO,EAAEA,OAAO,GAAG,CAAV,aAAiBA,OAAjB,0BAAwCA,OAAxC;AANN,GAAP;AAQH,CA1BD;;AA4BA,eAAeN,gBAAf","sourcesContent":["const getTimeRemaining = (endTime) => {\n    const current: string = new Date() + '';\n    const total = Date.parse(endTime) - Date.parse(current);\n    const seconds = Math.floor((total / 1000) % 60);\n    const minutes = Math.floor((total / 1000 / 60) % 60);\n    const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n    const days = Math.floor(total / (1000 * 60 * 60 * 24));\n    if (total <= 0) {\n        return {\n            total: Date.parse(endTime),\n            // percentage: 100,\n            days: `0 day`,\n            hours: `0 hour`,\n            minutes: `0 minute`,\n            seconds: `0 second`,\n        };\n    }\n\n    return {\n        total,\n        // percentage: (Date.parse(current) / Date.parse(endTime)) * 100,\n        days: days > 1 ? `${days} days` : `${days} day`,\n        hours: hours > 1 ? `${hours} hours` : `${hours} hour`,\n        minutes: minutes > 1 ? `${minutes} minutes` : `${minutes} minute`,\n        seconds: seconds > 1 ? `${seconds} seconds` : `${seconds} second`,\n    };\n};\n\nexport default getTimeRemaining;\n"]},"metadata":{},"sourceType":"module"}