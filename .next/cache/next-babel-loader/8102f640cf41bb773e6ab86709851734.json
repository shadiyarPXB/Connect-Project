{"ast":null,"code":"const getTimeRemaining = endTime => {\n  const current = new Date() + '';\n  const total = Date.parse(endTime) - Date.parse(current);\n  const seconds = Math.floor(total / 1000 % 60);\n  const minutes = Math.floor(total / 1000 / 60 % 60);\n  const hours = Math.floor(total / (1000 * 60 * 60) % 24);\n  const days = Math.floor(total / (1000 * 60 * 60 * 24));\n\n  if (total <= 0) {\n    return {\n      total: Date.parse(endTime),\n      // percentage: 100,\n      days: `0 day`,\n      hours: `0 hour`,\n      minutes: `0 minute`,\n      seconds: `0 second`\n    };\n  }\n\n  return {\n    total,\n    // percentage: (Date.parse(current) / Date.parse(endTime)) * 100,\n    days: days > 1 ? `${days} days` : `${days} day`,\n    hours: hours > 1 ? `${hours} hours` : `${hours} hour`,\n    minutes: minutes > 1 ? `${minutes} minutes` : `${minutes} minute`,\n    seconds: seconds > 1 ? `${seconds} seconds` : `${seconds} second`\n  };\n};\n\nexport default getTimeRemaining;","map":{"version":3,"sources":["/Users/mdshifut/Downloads/Connect-Project-master/utils/getTimeRemaining.tsx"],"names":["getTimeRemaining","endTime","current","Date","total","parse","seconds","Math","floor","minutes","hours","days"],"mappings":"AAAA,MAAMA,gBAAgB,GAAIC,OAAD,IAAa;AAClC,QAAMC,OAAe,GAAG,IAAIC,IAAJ,KAAa,EAArC;AACA,QAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAWJ,OAAX,IAAsBE,IAAI,CAACE,KAAL,CAAWH,OAAX,CAApC;AACA,QAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYJ,KAAK,GAAG,IAAT,GAAiB,EAA5B,CAAhB;AACA,QAAMK,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYJ,KAAK,GAAG,IAAR,GAAe,EAAhB,GAAsB,EAAjC,CAAhB;AACA,QAAMM,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAYJ,KAAK,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAN,GAA6B,EAAxC,CAAd;AACA,QAAMO,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWJ,KAAK,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAhB,CAAb;;AACA,MAAIA,KAAK,IAAI,CAAb,EAAgB;AACZ,WAAO;AACHA,MAAAA,KAAK,EAAED,IAAI,CAACE,KAAL,CAAWJ,OAAX,CADJ;AAEH;AACAU,MAAAA,IAAI,EAAG,OAHJ;AAIHD,MAAAA,KAAK,EAAG,QAJL;AAKHD,MAAAA,OAAO,EAAG,UALP;AAMHH,MAAAA,OAAO,EAAG;AANP,KAAP;AAQH;;AAED,SAAO;AACHF,IAAAA,KADG;AAEH;AACAO,IAAAA,IAAI,EAAEA,IAAI,GAAG,CAAP,GAAY,GAAEA,IAAK,OAAnB,GAA6B,GAAEA,IAAK,MAHvC;AAIHD,IAAAA,KAAK,EAAEA,KAAK,GAAG,CAAR,GAAa,GAAEA,KAAM,QAArB,GAAgC,GAAEA,KAAM,OAJ5C;AAKHD,IAAAA,OAAO,EAAEA,OAAO,GAAG,CAAV,GAAe,GAAEA,OAAQ,UAAzB,GAAsC,GAAEA,OAAQ,SALtD;AAMHH,IAAAA,OAAO,EAAEA,OAAO,GAAG,CAAV,GAAe,GAAEA,OAAQ,UAAzB,GAAsC,GAAEA,OAAQ;AANtD,GAAP;AAQH,CA1BD;;AA4BA,eAAeN,gBAAf","sourcesContent":["const getTimeRemaining = (endTime) => {\n    const current: string = new Date() + '';\n    const total = Date.parse(endTime) - Date.parse(current);\n    const seconds = Math.floor((total / 1000) % 60);\n    const minutes = Math.floor((total / 1000 / 60) % 60);\n    const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n    const days = Math.floor(total / (1000 * 60 * 60 * 24));\n    if (total <= 0) {\n        return {\n            total: Date.parse(endTime),\n            // percentage: 100,\n            days: `0 day`,\n            hours: `0 hour`,\n            minutes: `0 minute`,\n            seconds: `0 second`,\n        };\n    }\n\n    return {\n        total,\n        // percentage: (Date.parse(current) / Date.parse(endTime)) * 100,\n        days: days > 1 ? `${days} days` : `${days} day`,\n        hours: hours > 1 ? `${hours} hours` : `${hours} hour`,\n        minutes: minutes > 1 ? `${minutes} minutes` : `${minutes} minute`,\n        seconds: seconds > 1 ? `${seconds} seconds` : `${seconds} second`,\n    };\n};\n\nexport default getTimeRemaining;\n"]},"metadata":{},"sourceType":"module"}